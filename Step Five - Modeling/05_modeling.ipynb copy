{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5 Modeling<a id='5_Modeling'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.1 Contents<a id='5.1_Contents'></a>\n",
    "* [5 Modeling](#5_Modeling)\n",
    "  * [5.1 Contents](#5.1_Contents)\n",
    "  * [5.2 Introduction](#5.2_Introduction)\n",
    "  * [5.3 Imports](#5.3_Imports)\n",
    "  * [5.4 Load Model](#5.4_Load_Model)\n",
    "  * [5.5 Load Data](#5.5_Load_Data)\n",
    "  * [5.6 Refit Model On All Available Data (excluding Big Mountain)](#5.6_Refit_Model_On_All_Available_Data_(excluding_Big_Mountain))\n",
    "  * [5.7 Calculate Expected Big Mountain Ticket Price From The Model](#5.7_Calculate_Expected_Big_Mountain_Ticket_Price_From_The_Model)\n",
    "  * [5.8 Big Mountain Resort In Market Context](#5.8_Big_Mountain_Resort_In_Market_Context)\n",
    "    * [5.8.1 Ticket price](#5.8.1_Ticket_price)\n",
    "    * [5.8.2 Vertical drop](#5.8.2_Vertical_drop)\n",
    "    * [5.8.3 Snow making area](#5.8.3_Snow_making_area)\n",
    "    * [5.8.4 Total number of chairs](#5.8.4_Total_number_of_chairs)\n",
    "    * [5.8.5 Fast quads](#5.8.5_Fast_quads)\n",
    "    * [5.8.6 Runs](#5.8.6_Runs)\n",
    "    * [5.8.7 Longest run](#5.8.7_Longest_run)\n",
    "    * [5.8.8 Trams](#5.8.8_Trams)\n",
    "    * [5.8.9 Skiable terrain area](#5.8.9_Skiable_terrain_area)\n",
    "  * [5.9 Modeling scenarios](#5.9_Modeling_scenarios)\n",
    "    * [5.9.1 Scenario 1](#5.9.1_Scenario_1)\n",
    "    * [5.9.2 Scenario 2](#5.9.2_Scenario_2)\n",
    "    * [5.9.3 Scenario 3](#5.9.3_Scenario_3)\n",
    "    * [5.9.4 Scenario 4](#5.9.4_Scenario_4)\n",
    "  * [5.10 Summary](#5.10_Summary)\n",
    "  * [5.11 Further work](#5.11_Further_work)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.2 Introduction<a id='5.2_Introduction'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, we now take our model for ski resort ticket price and leverage it to gain some insights into what price Big Mountain's facilities might actually support as well as explore the sensitivity of changes to various resort parameters. Note that this relies on the implicit assumption that all other resorts are largely setting prices based on how much people value certain facilities. Essentially this assumes prices are set by a free market.\n",
    "\n",
    "We can now use our model to gain insight into what Big Mountain's ideal ticket price could/should be, and how that might change under various scenarios."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.3 Imports<a id='5.3_Imports'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import pickle\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn import __version__ as sklearn_version\n",
    "from sklearn.model_selection import cross_validate\n",
    "import math"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.4 Load Model<a id='5.4_Load_Model'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected model version doesn't match version loaded\n"
     ]
    }
   ],
   "source": [
    "# This isn't exactly production-grade, but a quick check for development\n",
    "# These checks can save some head-scratching in development when moving from\n",
    "# one python environment to another, for example\n",
    "expected_model_version = '1.0'\n",
    "model_path = '../models/ski_resort_pricing_model.pkl'\n",
    "if os.path.exists(model_path):\n",
    "    with open(model_path, 'rb') as f:\n",
    "        model = pickle.load(f)\n",
    "    if model.version != expected_model_version:\n",
    "        print(\"Expected model version doesn't match version loaded\")\n",
    "    if model.sklearn_version != sklearn_version:\n",
    "        print(\"Warning: model created under different sklearn version\")\n",
    "else:\n",
    "    print(\"Expected model not found\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.5 Load Data<a id='5.5_Load_Data'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ski_data = pd.read_csv('/Users/pedrorodriguez/Desktop/Springboard/DataScienceGuidedCapstone-master-2/raw_data/ski_resort_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                 279\n",
       "Region               279\n",
       "state                279\n",
       "summit_elev          279\n",
       "vertical_drop        279\n",
       "base_elev            279\n",
       "trams                279\n",
       "fastEight            134\n",
       "fastSixes            279\n",
       "fastQuads            279\n",
       "quad                 279\n",
       "triple               279\n",
       "double               279\n",
       "surface              279\n",
       "total_chairs         279\n",
       "Runs                 276\n",
       "TerrainParks         235\n",
       "LongestRun_mi        274\n",
       "SkiableTerrain_ac    277\n",
       "Snow Making_ac       242\n",
       "daysOpenLastYear     233\n",
       "yearsOpen            278\n",
       "averageSnowfall      268\n",
       "AdultWeekday         272\n",
       "AdultWeekend         279\n",
       "projectedDaysOpen    236\n",
       "NightSkiing_ac       164\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ski_data = ski_data[ski_data['AdultWeekend'].notnull()]\n",
    "ski_data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summit_elev          2380.0\n",
      "vertical_drop         825.0\n",
      "base_elev            1350.0\n",
      "trams                   0.0\n",
      "fastEight               0.0\n",
      "fastSixes               0.0\n",
      "fastQuads               0.0\n",
      "quad                    0.0\n",
      "triple                  1.0\n",
      "double                  1.0\n",
      "surface                 2.0\n",
      "total_chairs            6.0\n",
      "Runs                   31.0\n",
      "TerrainParks            2.0\n",
      "LongestRun_mi           1.0\n",
      "SkiableTerrain_ac     178.0\n",
      "Snow Making_ac        100.0\n",
      "daysOpenLastYear      110.0\n",
      "yearsOpen              58.0\n",
      "averageSnowfall       131.0\n",
      "AdultWeekday           50.0\n",
      "AdultWeekend           60.0\n",
      "projectedDaysOpen     117.5\n",
      "NightSkiing_ac         70.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "ski_data_median = ski_data.median()\n",
    "print(ski_data_median)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ski_data = ski_data.fillna(ski_data_median)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                 279\n",
       "Region               279\n",
       "state                279\n",
       "summit_elev          279\n",
       "vertical_drop        279\n",
       "base_elev            279\n",
       "trams                279\n",
       "fastEight            279\n",
       "fastSixes            279\n",
       "fastQuads            279\n",
       "quad                 279\n",
       "triple               279\n",
       "double               279\n",
       "surface              279\n",
       "total_chairs         279\n",
       "Runs                 279\n",
       "TerrainParks         279\n",
       "LongestRun_mi        279\n",
       "SkiableTerrain_ac    279\n",
       "Snow Making_ac       279\n",
       "daysOpenLastYear     279\n",
       "yearsOpen            279\n",
       "averageSnowfall      279\n",
       "AdultWeekday         279\n",
       "AdultWeekend         279\n",
       "projectedDaysOpen    279\n",
       "NightSkiing_ac       279\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ski_data.isnull().count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "big_mountain = ski_data[ski_data.Name == 'Big Mountain Resort']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>151</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>Big Mountain Resort</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Region</th>\n",
       "      <td>Montana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <td>Montana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>summit_elev</th>\n",
       "      <td>6817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vertical_drop</th>\n",
       "      <td>2353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>base_elev</th>\n",
       "      <td>4464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trams</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fastEight</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fastSixes</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fastQuads</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>quad</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>triple</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>double</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>surface</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_chairs</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Runs</th>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TerrainParks</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LongestRun_mi</th>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SkiableTerrain_ac</th>\n",
       "      <td>3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Snow Making_ac</th>\n",
       "      <td>600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>daysOpenLastYear</th>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yearsOpen</th>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>averageSnowfall</th>\n",
       "      <td>333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdultWeekday</th>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdultWeekend</th>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>projectedDaysOpen</th>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NightSkiing_ac</th>\n",
       "      <td>600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   151\n",
       "Name               Big Mountain Resort\n",
       "Region                         Montana\n",
       "state                          Montana\n",
       "summit_elev                       6817\n",
       "vertical_drop                     2353\n",
       "base_elev                         4464\n",
       "trams                                0\n",
       "fastEight                            0\n",
       "fastSixes                            0\n",
       "fastQuads                            3\n",
       "quad                                 2\n",
       "triple                               6\n",
       "double                               0\n",
       "surface                              3\n",
       "total_chairs                        14\n",
       "Runs                               105\n",
       "TerrainParks                         4\n",
       "LongestRun_mi                      3.3\n",
       "SkiableTerrain_ac                 3000\n",
       "Snow Making_ac                     600\n",
       "daysOpenLastYear                   123\n",
       "yearsOpen                           72\n",
       "averageSnowfall                    333\n",
       "AdultWeekday                        81\n",
       "AdultWeekend                        81\n",
       "projectedDaysOpen                  123\n",
       "NightSkiing_ac                     600"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "big_mountain.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.6 Refit Model On All Available Data (excluding Big Mountain)<a id='5.6_Refit_Model_On_All_Available_Data_(excluding_Big_Mountain)'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This next step requires some careful thought. We want to refit the model using all available data. But should we include Big Mountain data? On the one hand, we are _not_ trying to estimate model performance on a previously unseen data sample, so theoretically including Big Mountain data should be fine. One might first think that including Big Mountain in the model training would, if anything, improve model performance in predicting Big Mountain's ticket price. But here's where our business context comes in. The motivation for this entire project is based on the sense that Big Mountain needs to adjust its pricing. One way to phrase this problem: we want to train a model to predict Big Mountain's ticket price based on data from _all the other_ resorts! We don't want Big Mountain's current price to bias this. We want to calculate a price based only on its competitors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= ski_data.loc[ski_data.Name != \"Big Mountain Resort\", model.X_columns]\n",
    "y= ski_data.loc[ski_data.Name != \"Big Mountain Resort\", 'AdultWeekend']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(278, 278)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X), len(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('simpleimputer', SimpleImputer()), ('standardscaler', None),\n",
       "                ('randomforestregressor',\n",
       "                 RandomForestRegressor(n_estimators=33, random_state=47))])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "cv_results = cross_validate(model, X, y, scoring='neg_mean_absolute_error', cv=5, n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-6.38975108, -7.0299026 , -6.35458874, -7.42790083, -6.6130303 ])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv_results['test_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.763034710743801, 0.4103499768835235)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mae_mean, mae_std = np.mean(-1 * cv_results['test_score']), np.std(-1 * cv_results['test_score'])\n",
    "mae_mean, mae_std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These numbers will inevitably be different to those in the previous step that used a different training data set. They should, however, be consistent. It's important to appreciate that estimates of model performance are subject to the noise and uncertainty of data!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.7 Calculate Expected Big Mountain Ticket Price From The Model<a id='5.7_Calculate_Expected_Big_Mountain_Ticket_Price_From_The_Model'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_bm = ski_data.loc[ski_data.Name == \"Big Mountain Resort\", model.X_columns]\n",
    "y_bm = ski_data.loc[ski_data.Name == \"Big Mountain Resort\", 'AdultWeekend']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "bm_pred = model.predict(X_bm).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_bm = y_bm.values.item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Big Mountain Resort modelled price is $87.48, actual price is $81.00.\n",
      "Even with the expected mean absolute error of $6.76, this suggests there is room for an increase.\n"
     ]
    }
   ],
   "source": [
    "print(f'Big Mountain Resort modelled price is ${bm_pred:.2f}, actual price is ${y_bm:.2f}.')\n",
    "print(f'Even with the expected mean absolute error of ${mae_mean:.2f}, this suggests there is room for an increase.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This result should be looked at optimistically and doubtfully! The validity of our model lies in the assumption that other resorts accurately set their prices according to what the market (the ticket-buying public) supports. The fact that our resort seems to be charging that much less that what's predicted suggests our resort might be undercharging. \n",
    "But if ours is mispricing itself, are others? It's reasonable to expect that some resorts will be \"overpriced\" and some \"underpriced.\" Or if resorts are pretty good at pricing strategies, it could be that our model is simply lacking some key data? Certainly we know nothing about operating costs, for example, and they would surely help."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.8 Big Mountain Resort In Market Context<a id='5.8_Big_Mountain_Resort_In_Market_Context'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Features that came up as important in the modeling (not just our final, random forest model) included:\n",
    "* vertical_drop\n",
    "* Snow Making_ac\n",
    "* total_chairs\n",
    "* fastQuads\n",
    "* Runs\n",
    "* LongestRun_mi\n",
    "* trams\n",
    "* SkiableTerrain_ac"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A handy glossary of skiing terms can be found on the [ski.com](https://www.ski.com/ski-glossary) site. Some potentially relevant contextual information is that vertical drop, although nominally the height difference from the summit to the base, is generally taken from the highest [_lift-served_](http://verticalfeet.com/) point."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's often useful to define custom functions for visualizing data in meaningful ways. The function below takes a feature name as an input and plots a histogram of the values of that feature. It then marks where Big Mountain sits in the distribution by marking Big Mountain's value with a vertical line using `matplotlib`'s [axvline](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.axvline.html) function. It also performs a little cleaning up of missing values and adds descriptive labels and a title."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Code task 1#\n",
    "#Add code to the `plot_compare` function that displays a vertical, dashed line\n",
    "#on the histogram to indicate Big Mountain's position in the distribution\n",
    "#Hint: plt.axvline() plots a vertical line, its position for 'feature1'\n",
    "#would be `big_mountain['feature1'].values, we'd like a red line, which can be\n",
    "#specified with c='r', a dashed linestyle is produced by ls='--',\n",
    "#and it's nice to give it a slightly reduced alpha value, such as 0.8.\n",
    "#Don't forget to give it a useful label (e.g. 'Big Mountain') so it's listed\n",
    "#in the legend.\n",
    "def plot_compare(feat_name, description, state=None, figsize=(10, 5)):\n",
    "    \"\"\"Graphically compare distributions of features.\n",
    "    \n",
    "    Plot histogram of values for all resorts and reference line to mark\n",
    "    Big Mountain's position.\n",
    "    \n",
    "    Arguments:\n",
    "    feat_name - the feature column name in the data\n",
    "    description - text description of the feature\n",
    "    state - select a specific state (None for all states)\n",
    "    figsize - (optional) figure size\n",
    "    \"\"\"\n",
    "    \n",
    "    plt.subplots(figsize=figsize)\n",
    "    # quirk that hist sometimes objects to NaNs, sometimes doesn't\n",
    "    # filtering only for finite values tidies this up\n",
    "    if state is None:\n",
    "        ski_x = ski_data[feat_name]\n",
    "    else:\n",
    "        ski_x = ski_data.loc[ski_data.state == state, feat_name]\n",
    "    ski_x = ski_x[np.isfinite(ski_x)]\n",
    "    plt.hist(ski_x, bins=30)\n",
    "    plt.axvline(x=big_mountain[feat_name].values, c='r', ls='--', alpha=0.8, label='Big Mountain')\n",
    "    plt.xlabel(description)\n",
    "    plt.ylabel('frequency')\n",
    "    plt.title(description + ' distribution for resorts in market share')\n",
    "    plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.1 Ticket price<a id='5.8.1_Ticket_price'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at where Big Mountain sits overall amongst all resorts for price and for just other resorts in Montana."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('AdultWeekend', 'Adult weekend ticket price ($)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('AdultWeekend', 'Adult weekend ticket price ($) - Montana only', state='Montana')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.2 Vertical drop<a id='5.8.2_Vertical_drop'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('vertical_drop', 'Vertical drop (feet)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain is doing well for vertical drop, but there are still quite a few resorts with a greater drop."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.3 Snow making area<a id='5.8.3_Snow_making_area'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('Snow Making_ac', 'Area covered by snow makers (acres)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain is very high up the league table of snow making area."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.4 Total number of chairs<a id='5.8.4_Total_number_of_chairs'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('total_chairs', 'Total number of chairs')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain has amongst the highest number of total chairs, resorts with more appear to be outliers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.5 Fast quads<a id='5.8.5_Fast_quads'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('fastQuads', 'Number of fast quads')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most resorts have no fast quads. Big Mountain has 3, which puts it high up that league table. There are some values  much higher, but they are rare."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.6 Runs<a id='5.8.6_Runs'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('Runs', 'Total number of runs')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain compares well for the number of runs. There are some resorts with more, but not many."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.7 Longest run<a id='5.8.7_Longest_run'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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sM466/S7BdLES5KkIcKkq7MM5P0w8ZKkukyeXE3SMDFixAgmTpzIlltuydZbb80f/vAHAB566CH23XfffpW14447Mm7cOBrvGb333nuz+uqrD2rMAFddddVLsS7NxRdfzAknnDDo+2/kGC9Jqsshh7Q7AmlQrbLKKtxyyy0A/PrXv+aYY47ht7/9LRtssAHnn39+v8sbPXo0v//975kyZQoLFixgzpw5gx0yUCVeq6++Otttt91S19tzzz3Zc889a4mhiy1ekiSp3xYuXMjaa68NwKxZs9hiiy0AePrpp9lvv/2YMGEC+++/P295y1t6vfvMAQccwDnnnAPABRdcwD777PPSa5nJZz7zGbbYYgve9KY3ce655wJVErX77ru/tN5hhx3GmWeeCVR3uvniF7/I1ltvzZve9CbuueceZs2axXe+8x2+/vWvM3HiRH73u99xySWX8Ja3vIWtttqKnXfemblz5wJw5plncli58PH73/9+jjjiCLbbbjte85rXDCix7IktXpJUlyOOqOannNLeOKRB8swzzzBx4kQWLVrEnDlzuPLKK1+2zqmnnsraa6/Nbbfdxh133MHEiRN7LW/q1Kl8+MMf5oUXXuCcc85hxowZHHfccUCViN1yyy3ceuutPPLII7z5zW9mhx126DPGddddl5tvvplTTz2Vk046iTPOOIOPfOQjrL766hx55JEAPPbYY/zxj38kIjjjjDM48cQTOfnkk19W1pw5c7jmmmu455572HPPPfvdndoTEy/VZvzRv1jmMmadsNsgRCK1iddbUp0OPfTly3bZBaZNqz57XYl/oz32qKYFC15+cd8ZM/rcZWNX47XXXsv73vc+7rjjjiXWueaaa/jEJz4BwBZbbMGECRN6LW/EiBFMmTKFc889l2eeeYbx48cvUc6BBx7IiBEjGDt2LG9/+9u54YYbWHPNNZcaY1er2TbbbMMFF1zQ4zqzZ89m//33Z86cOTz33HO9Xg5i7733ZoUVVmDzzTd/qVVsWdnVKEmS+u2tb30rjzzyCA8//PASyxsHyzfjgAMO4PDDD2e//fZrqpwVV1yRF1988aXn3S/nsPLKKwNVUvf888/3WMbhhx/OYYcdxu23387pp5/e6yUhuspaWjz9ZYuXJElD0dJaqEaNWvrro0c31cK1NPfccw8vvPAC66yzDk8//fRLy6dMmcJ5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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('LongestRun_mi', 'Longest run length (miles)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain has one of the longest runs. Although it is just over half the length of the longest, the longer ones are rare."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.8 Trams<a id='5.8.8_Trams'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('trams', 'Number of trams')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The vast majority of resorts, such as Big Mountain, have no trams."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.8.9 Skiable terrain area<a id='5.8.9_Skiable_terrain_area'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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iRPZdttt2X777fnNb34DwJNPPslBBx00qH3tvvvubLTRRmTmgnkHHnggq6yyyrDGDHDttdcuiHUgV1xxBaeffvqwH7+Vfcia7qij6o5AkrSUW3nllbnzzjsB+PnPf85JJ53Er371K9Zff30uvfTSQe9v9dVX54YbbmCXXXZh7ty5zJo1a7hDBqqEbJVVVuHNb37zgOvtv//+7L///j2JoY81ZJIkadg899xzrLHGGgDMmDGDbbbZBoAXXniBQw45hAkTJnDooYey4447dnzazmGHHcZFF10EwGWXXcZ73vOeBcsyk3/+539mm2224Y1vfCMXX3wxUCVX73rXuxasd8wxx3DeeecB1ZN9PvvZz7L99tvzxje+kQceeIAZM2bwta99jS996UtMnDiRX//611x55ZXsuOOObLfdduy1117Mnj0bgPPOO49jyo3UjzzySI499lje/OY3s+mmmw4p4WzHGrKmO/bY6vWss+qNQ5K01HrxxReZOHEi8+bNY9asWfzyl7981TrnnHMOa6yxBtOnT+eee+5h4sSJHfe355578qEPfYj58+dz0UUXMXXqVE499VSgStDuvPNO7rrrLubMmcOb3vQmdtttt0XGuPbaa3PHHXdwzjnncMYZZ3Duuefy4Q9/mFVWWYXjjz8egGeffZabbrqJiODcc89lypQpnHnmma/a16xZs7j++ut54IEH2H///QfdLNuOCVkXxp/448Xex4zT3zkMkfSA962RpGXL0Ue/et7b3gYHH1x95/f9I95qv/2qYe7cV98sfOrURR6ytcnyxhtv5AMf+AD33HPPQutcf/31fPzjHwdgm222YcKECR33N2rUKHbZZRcuvvhiXnzxRcaPH7/Qfg4//HBGjRrF2LFjeetb38qtt97KqquuOmCMfbVsO+ywA5dddlnbdWbOnMmhhx7KrFmz+Otf/9rxthUHHnggyy23HFtvvfWCWrTFZZOlJEkaNjvvvDNz5szh6aefXmh+ayf9bhx22GF87GMf45BDDulqP8svvzx/+9vfFkz3v+3ESiutBFTJ3iuvvNJ2Hx/72Mc45phjuPvuu/n617/e8dYVffsaKJ7BsoZMkqRlyUA1WqNHD7x89dW7qhEbyAMPPMD8+fNZa621eOGFFxbM32WXXbjkkkvYY489uO+++7j77rsH3M+uu+7KSSedxOGHH77Q/N12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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_compare('SkiableTerrain_ac', 'Skiable terrain area (acres)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain is amongst the resorts with the largest amount of skiable terrain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.9 Modeling scenarios<a id='5.9_Modeling_scenarios'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Big Mountain Resort has been reviewing potential scenarios for either cutting costs or increasing revenue (from ticket prices). Ticket price is not determined by any set of parameters; the resort is free to set whatever price it likes. However, the resort operates within a market where people pay more for certain facilities, and less for others. Being able to sense how facilities support a given ticket price is valuable business intelligence. This is where the utility of our model comes in.\n",
    "\n",
    "The business has shortlisted some options:\n",
    "1. Permanently closing down up to 10 of the least used runs. This doesn't impact any other resort statistics.\n",
    "2. Increase the vertical drop by adding a run to a point 150 feet lower down but requiring the installation of an additional chair lift to bring skiers back up, without additional snow making coverage\n",
    "3. Same as number 2, but adding 2 acres of snow making cover\n",
    "4. Increase the longest run by 0.2 mile to boast 3.5 miles length, requiring an additional snow making coverage of 4 acres\n",
    "\n",
    "The expected number of visitors over the season is 350,000 and, on average, visitors ski for five days. Assume the provided data includes the additional lift that Big Mountain recently installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "expected_visitors = 350_000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vertical_drop</th>\n",
       "      <th>Snow Making_ac</th>\n",
       "      <th>total_chairs</th>\n",
       "      <th>fastQuads</th>\n",
       "      <th>Runs</th>\n",
       "      <th>LongestRun_mi</th>\n",
       "      <th>trams</th>\n",
       "      <th>SkiableTerrain_ac</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>2353</td>\n",
       "      <td>600.0</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>105.0</td>\n",
       "      <td>3.3</td>\n",
       "      <td>0</td>\n",
       "      <td>3000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     vertical_drop  Snow Making_ac  total_chairs  fastQuads   Runs  \\\n",
       "151           2353           600.0            14          3  105.0   \n",
       "\n",
       "     LongestRun_mi  trams  SkiableTerrain_ac  \n",
       "151            3.3      0             3000.0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_feats = ['vertical_drop', 'Snow Making_ac', 'total_chairs', 'fastQuads', \n",
    "             'Runs', 'LongestRun_mi', 'trams', 'SkiableTerrain_ac']\n",
    "big_mountain[all_feats]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Code task 2#\n",
    "#In this function, copy the Big Mountain data into a new data frame\n",
    "#(Note we use .copy()!)\n",
    "#And then for each feature, and each of its deltas (changes from the original),\n",
    "#create the modified scenario dataframe (bm2) and make a ticket price prediction\n",
    "#for it. The difference between the scenario's prediction and the current\n",
    "#prediction is then calculated and returned.\n",
    "#Complete the code to increment each feature by the associated delta\n",
    "def predict_increase(features, deltas):\n",
    "    \"\"\"Increase in modelled ticket price by applying delta to feature.\n",
    "    \n",
    "    Arguments:\n",
    "    features - list, names of the features in the ski_data dataframe to change\n",
    "    deltas - list, the amounts by which to increase the values of the features\n",
    "    \n",
    "    Outputs:\n",
    "    Amount of increase in the predicted ticket price\n",
    "    \"\"\"\n",
    "    \n",
    "    bm2 = X_bm.copy()\n",
    "    for f, d in zip(features, deltas):\n",
    "        bm2[features] += deltas\n",
    "    return model.predict(bm2).item() - model.predict(X_bm).item()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.9.1 Scenario 1<a id='5.9.1_Scenario_1'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Close up to 10 of the least used runs. The number of runs is the only parameter varying."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in range(-1, -11, -1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "runs_delta = [i for i in range(-1, -11, -1)]\n",
    "price_deltas = [predict_increase(['Runs'], [delta]) for delta in runs_delta]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.21212121212121815]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_deltas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Code task 3#\n",
    "#Create two plots, side by side, for the predicted ticket price change (delta) for each\n",
    "#condition (number of runs closed) in the scenario and the associated predicted revenue\n",
    "#change on the assumption that each of the expected visitors buys 5 tickets\n",
    "#There are two things to do here:\n",
    "#1 - use a list comprehension to create a list of the number of runs closed from `runs_delta`\n",
    "#2 - use a list comprehension to create a list of predicted revenue changes from `price_deltas`\n",
    "runs_closed = [-1 * runs_delta for runs_delta in runs_delta] #1\n",
    "fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n",
    "fig.subplots_adjust(wspace=0.5)\n",
    "ax[0].plot(runs_closed, price_deltas, 'o-')\n",
    "ax[0].set(xlabel='Runs closed', ylabel='Change ($)', title='Ticket price')\n",
    "revenue_deltas = [5 * expected_visitors * price_deltas for price_deltas in price_deltas] #2\n",
    "ax[1].plot(runs_closed, revenue_deltas, 'o-')\n",
    "ax[1].set(xlabel='Runs closed', ylabel='Change ($)', title='Revenue');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model says closing one run makes no difference. Closing 2 and 3 successively reduces support for ticket price and so revenue. If Big Mountain closes down 3 runs, it seems they may as well close down 4 or 5 as there's no further loss in ticket price. Increasing the closures down to 6 or more leads to a large drop. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.9.2 Scenario 2<a id='5.9.2_Scenario_2'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this scenario, Big Mountain is adding a run, increasing the vertical drop by 150 feet, and installing an additional chair lift."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Code task 4#\n",
    "#Call `predict_increase` with a list of the features 'Runs', 'vertical_drop', and 'total_chairs'\n",
    "#and associated deltas of 1, 150, and 1\n",
    "ticket2_increase = predict_increase(['Runs', 'vertical_drop', 'total_chairs'], [1, 150, 1])\n",
    "revenue2_increase = 5 * expected_visitors * ticket2_increase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This scenario increases support for ticket price by $1.33\n",
      "Over the season, this could be expected to amount to $2333333\n"
     ]
    }
   ],
   "source": [
    "print(f'This scenario increases support for ticket price by ${ticket2_increase:.2f}')\n",
    "print(f'Over the season, this could be expected to amount to ${revenue2_increase:.0f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.9.3 Scenario 3<a id='5.9.3_Scenario_3'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this scenario, you are repeating the previous one but adding 2 acres of snow making."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Code task 5#\n",
    "#Repeat scenario 2 conditions, but add an increase of 2 to `Snow Making_ac`\n",
    "ticket3_increase = predict_increase(['Runs', 'vertical_drop', 'total_chairs', 'Snow Making_ac'], [1, 150, 1, 2])\n",
    "revenue3_increase = 5 * expected_visitors * ticket3_increase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This scenario increases support for ticket price by $1.33\n",
      "Over the season, this could be expected to amount to $2333333\n"
     ]
    }
   ],
   "source": [
    "print(f'This scenario increases support for ticket price by ${ticket3_increase:.2f}')\n",
    "print(f'Over the season, this could be expected to amount to ${revenue3_increase:.0f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Such a small increase in the snow making area makes no difference!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.9.4 Scenario 4<a id='5.9.4_Scenario_4'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This scenario calls for increasing the longest run by .2 miles and guaranteeing its snow coverage by adding 4 acres of snow making capability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Code task 6#\n",
    "#Predict the increase from adding 0.2 miles to `LongestRun_mi` and 4 to `Snow Making_ac`\n",
    "predict_increase(['LongestRun_mi', 'Snow Making_ac'], [0.2, 4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No difference whatsoever. Although the longest run feature was used in the linear model, the random forest model (the one we chose because of its better performance) only has longest run way down in the feature importance list. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.10 Summary<a id='5.10_Summary'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q: 1** Write a summary of the results of modeling these scenarios. Start by starting the current position; how much does Big Mountain currently charge? What does your modelling suggest for a ticket price that could be supported in the marketplace by Big Mountain's facilities? How would you approach suggesting such a change to the business leadership? Discuss the additional operating cost of the new chair lift per ticket (on the basis of each visitor on average buying 5 day tickets) in the context of raising prices to cover this. For future improvements, state which, if any, of the modeled scenarios you'd recommend for further consideration. Suggest how the business might test, and progress, with any run closures."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A: 1** Your answer here\n",
    "\n",
    "This next step requires some careful thought. We need to fit the model using all available data, but we will exclude from the analysis because we want to predict the BM Resort. We don't wish to Big Mountain's current price to bias this. Create a new dataset, first ski_data without Big Mountain Resort with model.X_columns as 'X', and the second ski_data without Big Mountain Resort and only AdultWeekend as 'y'.  Then we use the model.fit() with both datasets (X, y) to create the Pipeline. Create a cv_results with cross-validate function with a scoring of negative mean absolute error (MAE), and the results are -6.38975108, -7.0299026, -6.35458874, -7.42790083, -6.6130303 with a mean of 6.7630 and a standard deviation of 0.4103. These numbers will inevitably be different from those in the previous step that used another training data set. They should, however, be consistent. It's important to appreciate that estimates of model performance are subject to the noise and uncertainty of data,\n",
    "\n",
    "With the previews analysis, now we are going to try the model with the Big Mountain. First ski_data only with Big Mountain Resort with model.X_columns as 'X_bm', and the second ski_data only with Big Mountain Resort and AdultWeekend as 'y.' Then, create model predictor for X_bm as bm_pred and with y_bm will run the values and item() function to compare the prices. When we run the model, the result is the following: \n",
    "\n",
    "Big Mountain Resort modeled price is $87.48, the actual cost is $81.00.\n",
    "Even with the expected mean absolute error of $6.76, this suggests there is room for an increase.\n",
    "\n",
    "This result should be looked at optimistically and doubtfully! The model's validity lies in assuming that other resorts accurately set their prices according to what the market (the ticket-buying public) supports. \n",
    "We need to compare the other resorts' prices with the Big Mountain; it's reasonable to expect that some resorts will be \"overpriced\" and some \"underpriced.\" Or if resorts are pretty good at pricing strategies. \n",
    "\n",
    "We need to plots a histogram of the values of that feature. It then marks where Big Mountain sits in the distribution by keeping Big Mountain's value with a vertical line using matplotlib's axvline function. The first histogram shows that Big Mountain is not high then the other resorts, but we can see much resort between $40 and $70 tickets prices. The second histogram shows that Montana has the highest distribution for resorts in market share. The third histogram Big Mountain is doing well for the vertical drop, but there are still quite a few resorts with a more significant drop. When we compare the vertical drop of Big mountain, they are doing well, but few with more significant drops. In the snowmaking area, Big Mountain is very high up the league table. Big Mountain has amongst the highest number of total chairs, resorts with more appear to be outliers. Most resorts have no fast quads. Big Mountain has 3, which puts it high up that league table. There are some values much higher, but they are rare. It also compares well for the number of runs. There are some resorts with more, but not many. Big Mountain has one of the longest runs. Although it is just over half the length of the longest, the longer ones are rare. The vast majority of resorts, such as Big Mountain, have no trams, and Big Mountain has the most massive amount of skiable terrain amongst the resorts.\n",
    "\n",
    "Big Mountain Resort has been reviewing potential scenarios for either cutting costs or increasing revenue (from ticket prices). Any set of parameters does not determine ticket prices; the resort is free to set whatever price it likes. \n",
    "\n",
    "The expected number of visitors over the season is 350,000, and, on average, visitors ski for five days. Assume the provided data includes the additional lift that Big Mountain recently installed. When we run the first scenario, the model says closing nine-run makes no difference, but close ten drastically drops the value. In this scenario, Big Mountain is adding a run, increasing the vertical drop by 150 feet, and installing an additional chair lift. The model indicates this scenario increases support for ticket price by $1.33. In the third scenario, we are repeating the previous one but adding 2 acres of snowmaking. This scenario increases support for ticket price by $1.33. The fourth scenario calls for increasing the longest run by .2 miles and guaranteeing its snow coverage by adding 4 acres of snowmaking capability. No difference whatsoever. Although the longest run feature was used in the linear model, the random forest model (the one we chose because of its better performance) only has the most extended run way down in the feature importance list."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.11 Further work<a id='5.11_Further_work'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q: 2** What next? Highlight any deficiencies in the data that hampered or limited this work. The only price data in our dataset were ticket prices. You were provided with information about the additional operating cost of the new chair lift, but what other cost information would be useful? Big Mountain was already fairly high on some of the league charts of facilities offered, but why was its modeled price so much higher than its current price? Would this mismatch come as a surprise to the business executives? How would you find out? Assuming the business leaders felt this model was useful, how would the business make use of it? Would you expect them to come to you every time they wanted to test a new combination of parameters in a scenario? We hope you would have better things to do, so how might this model be made available for business analysts to use and explore?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A: 2** \n",
    "The data deficiencies that hampered or limited this work were the gaps and high amount of missing values on the data. This issue requires a high amount of work to clean the data and continuously fill those gaps with each feature's median, making it hard to create an accurate model prediction. The other valuable information for this study will be the cost of the resort's general operation and not just the new chairs' process. At some point in the study, we identified that Big Mountain resort was one of the game's tops in the number of runs distribution, the number of chairs distribution, the area covered by snowmakers, and in price was inside the average range of the resort competitions. This model is useful for the executive for the four scenarios that will apply to most situations and help predict the ticket price easily. In the beginning, maybe I will expect the customer to try new parameters, but eventually, the model will be trained to handle any scenario with any parameter. Suppose Big Mountain resort continuously collects the data and minimizes the number of missing values and starts to gather the number of people they receive every day. In that case, it will help the model be more accurate with the weekdays and weekends price tickets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
